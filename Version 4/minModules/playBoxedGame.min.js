import { myHeaders } from "./header.min.js"; import { arrayObjects as s } from "./objects.min.js"; import { reDrawGame as f } from "./reDrawGame.min.js"; import { playGame as i } from "./playGame.min.js"; import { aliveArrayChecker as a } from "./aliveArrayChecker.min.js"; function t() { let e = s.getRowArray, t = s.getChangedArray; for (let s = 0; s < e.length; s++)for (let f = 0; f < e[s].length; f++)if (0 == s) { if (0 == f) { if (0 == e[s][f]) { if (e[s][f + 1] + e[s + 1][f] + e[s + 1][f + 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s][f + 1] + e[s + 1][f] + e[s + 1][f + 1]) { case 2: case 3: break; default: t.push([s, f]) } } else if (f == e[s].length - 1) { if (0 == e[s][f]) { if (e[s][f - 1] + e[s + 1][f] + e[s + 1][f - 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s][f - 1] + e[s + 1][f] + e[s + 1][f - 1]) { case 2: case 3: break; default: t.push([s, f]) } } else if (0 == e[s][f]) { if (e[s][f - 1] + e[s][f + 1] + e[s + 1][f - 1] + e[s + 1][f] + e[s + 1][f + 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s][f - 1] + e[s][f + 1] + e[s + 1][f - 1] + e[s + 1][f] + e[s + 1][f + 1]) { case 2: case 3: break; default: t.push([s, f]) } } else if (s == e.length - 1) { if (0 == f) { if (0 == e[s][f]) { if (e[s][f + 1] + e[s - 1][f] + e[s - 1][f + 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s][f + 1] + e[s - 1][f] + e[s - 1][f + 1]) { case 2: case 3: break; default: t.push([s, f]) } } else if (f == e[s].length - 1) { if (0 == e[s][f]) { if (e[s][f - 1] + e[s - 1][f] + e[s - 1][f - 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s][f - 1] + e[s - 1][f] + e[s - 1][f - 1]) { case 2: case 3: break; default: t.push([s, f]) } } else if (0 == e[s][f]) { if (e[s][f - 1] + e[s][f + 1] + e[s - 1][f - 1] + e[s - 1][f] + e[s - 1][f + 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s][f - 1] + e[s][f + 1] + e[s - 1][f - 1] + e[s - 1][f] + e[s - 1][f + 1]) { case 2: case 3: break; default: t.push([s, f]) } } else if (0 == f) { if (0 == e[s][f]) { if (e[s - 1][f] + e[s - 1][f + 1] + e[s][f + 1] + e[s + 1][f] + e[s + 1][f + 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s - 1][f] + e[s - 1][f + 1] + e[s][f + 1] + e[s + 1][f] + e[s + 1][f + 1]) { case 2: case 3: break; default: t.push([s, f]) } } else if (f == e[s].length - 1) { if (0 == e[s][f]) { if (e[s - 1][f] + e[s - 1][f - 1] + e[s][f - 1] + e[s + 1][f] + e[s + 1][f - 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s - 1][f] + e[s - 1][f - 1] + e[s][f - 1] + e[s + 1][f] + e[s + 1][f - 1]) { case 2: case 3: break; default: t.push([s, f]) } } else if (0 == e[s][f]) { if (e[s - 1][f - 1] + e[s - 1][f] + e[s - 1][f + 1] + e[s][f - 1] + e[s][f + 1] + e[s + 1][f - 1] + e[s + 1][f] + e[s + 1][f + 1] === 3) t.push([s, f]) } else if (1 == e[s][f]) switch (e[s - 1][f - 1] + e[s - 1][f] + e[s - 1][f + 1] + e[s][f - 1] + e[s][f + 1] + e[s + 1][f - 1] + e[s + 1][f] + e[s + 1][f + 1]) { case 2: case 3: break; default: t.push([s, f]) }s.setChangedArray = t, f(), a(), i() } export { t as playBoxedGame };