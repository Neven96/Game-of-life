import { myHeaders } from "./header.min.js"; import { arrayObjects as t } from "./objects.min.js"; import { reDrawGame as l } from "./reDrawGame.min.js"; import { playGame as h } from "./playGame.min.js"; import { aliveArrayChecker as g } from "./aliveArrayChecker.min.js"; import { mod as n } from "./modulo.min.js"; function r() { let e = t.getRowArray, r = t.getChangedArray; for (let t = 0; t < e.length; t++)for (let l = 0; l < e[t].length; l++)if (0 == e[t][l]) { if (e[n(t - 1, e.length)][n(l - 1, e[t].length)] + e[n(t - 1, e.length)][l] + e[n(t - 1, e.length)][n(l + 1, e[t].length)] + e[t][n(l - 1, e[t].length)] + e[t][n(l + 1, e[t].length)] + e[n(t + 1, e.length)][n(l - 1, e[t].length)] + e[n(t + 1, e.length)][l] + e[n(t + 1, e.length)][n(l + 1, e[t].length)] === 3) r.push([t, l]) } else if (1 == e[t][l]) switch (e[n(t - 1, e.length)][n(l - 1, e[t].length)] + e[n(t - 1, e.length)][l] + e[n(t - 1, e.length)][n(l + 1, e[t].length)] + e[t][n(l - 1, e[t].length)] + e[t][n(l + 1, e[t].length)] + e[n(t + 1, e.length)][n(l - 1, e[t].length)] + e[n(t + 1, e.length)][l] + e[n(t + 1, e.length)][n(l + 1, e[t].length)]) { case 2: case 3: break; default: r.push([t, l]) }t.setChangedArray = r, l(), g(), h() } export { r as playInfinityGame };