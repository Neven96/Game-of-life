import { myHeaders } from "./header.min.js"; class t { constructor(e, t, r, s) { this.rectSize = e, this.cellSize = t, this.cellColor = r, this.backgroundColor = s } get getRectSize() { return this.rectSize } get getCellSize() { return this.cellSize } get getCellColor() { return this.cellColor } get getBackgroundColor() { return this.backgroundColor } } const r = new t(8, 7, "#2C3E4C", "#FFFFFF"), s = { board: "", content: "", get getBoard() { return this.board }, set setBoard(e) { this.board = e }, get getContent() { return this.content }, set setContent(e) { this.content = e } }, a = { rowArray: [], changedArray: [], get getRowArray() { return this.rowArray }, set setRowArray(e) { this.rowArray = e }, get getChangedArray() { return this.changedArray }, set setChangedArray(e) { this.changedArray = e } }, i = { speed: 500, get getSpeed() { return this.speed }, set setSpeed(e) { this.speed = e } }, n = { typeLevel: 1, typeGame: 1, drawable: !1, started: !1, equalOnce: !1, get getTypeLevel() { return this.typeLevel }, set setTypeLevel(e) { this.typeLevel = e }, get getTypeGame() { return this.typeGame }, set setTypeGame(e) { this.typeGame = e }, get getDrawable() { return this.drawable }, set setDrawable(e) { this.drawable = e }, get getStarted() { return this.started }, set setStarted(e) { this.started = e }, get getEqualOnce() { return this.equalOnce }, set setEqualOnce(e) { this.equalOnce = e } }, o = { generations: 0, generationsArray: [], get getGenerations() { return this.generations }, set setGenerations(e) { this.generations = e }, get getGenerationsArray() { return this.generationsArray }, set setGenerationsArray(e) { this.generationsArray = e }, increaseGenerations() { this.generations++ } }, h = { aliveCount: 0, aliveArray: [], get getAliveCount() { return this.aliveCount }, set setAliveCount(e) { this.aliveCount = e }, get getAliveArray() { return this.aliveArray }, set setAliveArray(e) { this.aliveArray = e }, countAlives(e) { return this.aliveCount = 0, e.forEach((e => { e.forEach((e => { 1 === e && (this.aliveCount += 1) })) })), this.aliveCount }, addToAliveArray(e) { return this.aliveArray.length < 20 || this.aliveArray.shift(), this.aliveArray.push(e), this.aliveArray } }, l = { addPaint: !1, locked: !1, get getAddPaint() { return this.addPaint }, set setAddPaint(e) { this.addPaint = e }, get getLocked() { return this.locked }, set setLocked(e) { this.locked = e } }; export { t as Cell, r as cell, s as canvasObject, a as arrayObjects, i as speedObject, n as typeObjects, o as generationsObject, h as aliveCountObject, l as paintObject };